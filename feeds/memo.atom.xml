<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>eiichiro Blog - Memo</title><link href="/" rel="alternate"></link><link href="/feeds/memo.atom.xml" rel="self"></link><id>/</id><updated>2017-10-15T23:00:00+09:00</updated><entry><title>ひき続きvcpkg</title><link href="/2017/10/15/vcpkg/" rel="alternate"></link><published>2017-10-15T23:00:00+09:00</published><updated>2017-10-15T23:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-10-15:/2017/10/15/vcpkg/</id><summary type="html">&lt;p&gt;vcpkg&lt;/p&gt;</summary><content type="html">&lt;h1&gt;vcpkg&lt;/h1&gt;
&lt;p&gt;現状でのメモ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FreeBSDのportsみたいなものでソースを拾ってきてビルドするシステムなので巨大ライブラリの場合はNuGetのように直ぐ使えるものではない&lt;/li&gt;
&lt;li&gt;先日のに追記した通り英語の言語パックが必要。( &lt;a href="https://www.microsoft.com/en-US/download/details.aspx?id=48157"&gt;英語言語パック&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;おまじないレベルだがchcp 65001しておく&lt;/li&gt;
&lt;li&gt;buildtrees以下に展開されてビルドするがvcpkg removeでもそれらは削除されない&lt;/li&gt;
&lt;li&gt;buildtrees以下は平気で100G越えてくるので要注意&lt;/li&gt;
&lt;li&gt;buildtrees以下はインストールしてしまえば消しても実用上問題ない&lt;ul&gt;
&lt;li&gt;各OSSのソースレベルデバッグは当然出来ない&lt;/li&gt;
&lt;li&gt;サンプルも消える&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;msmpiでコケる時はdownloadsにインストーラがあるのでそれを使ってインストールしておく&lt;/li&gt;
&lt;li&gt;必要なファイルはinstalledに配置され，手動，integrate，cmake(toolchain)で使える&lt;/li&gt;
&lt;li&gt;NativeなCMakeで使うのは&lt;a href="https://github.com/Microsoft/vcpkg/blob/master/docs/examples/using-sqlite.md"&gt;ここ&lt;/a&gt;の最後にあるが微妙&lt;/li&gt;
&lt;li&gt;import/export機能があるので，速いマシンでパッケージをビルド→export→他マシンでimportすれば同一環境を作れる&lt;/li&gt;
&lt;/ul&gt;</content><category term="VC"></category></entry><entry><title>Google Drive File Stream</title><link href="/2017/10/13/Google-DriveFS/" rel="alternate"></link><published>2017-10-13T23:00:00+09:00</published><updated>2017-10-13T23:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-10-13:/2017/10/13/Google-DriveFS/</id><summary type="html">&lt;p&gt;Google Drive File Stream&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Google Driveからの乗り換え&lt;/h1&gt;
&lt;p&gt;Google Driveのデスクトップアプリ(PCに同期させるアプリ)は2018年3月に廃止が決定。
置き換えソフトであるGoogle Drive File Streamアプリは，これまで大学との契約形態については未対応だったが配布開始された模様。
Google Driveアプリを使われていた方は乗り換えが必要で，かなり挙動が違った。
特にCドライブの容量が厳しく他のドライブに退避させていた方は注意が必要。&lt;/p&gt;
&lt;p&gt;・「マイドライブ」と「チームドライブ」は外付けドライブのフォルダとしてマウントされる
・データは基本的にクラウドに保持(ネットに繋っていないと見えない)
・オフラインでも使えるようにするにはフォルダやファイルを選択して右クリックメニューで「オフラインで使用可能にする」
・オフライン用のキャッシュはc:\Users\username\AppData\Local\Google\DriveFSに保存される
・Google DriveをCドライブ以外で運用していた場合には，Cドライブの容量を食い潰されるうえに設定で変更できない
・既存のGoogleドライブからの引き継ぎは無い(インストーラorアプリがGoogleドライブの停止を推奨してくる)
・旧GoogleドライブのフォルダはGoogle Drive File Streamに以降した後は手動で削除する必要がある(消さなくても良いが同期しないうえに容量を食う)
・同期中はマウント状態が不安定になる(恐らく改善される)
・特に大量のファイルを同期させようとするとエクスプローラーが応答しなくなるが，暫く放置すると同期が終わって正常な状態になる&lt;/p&gt;
&lt;h1&gt;別ドライブにキャッシュを置く方法(無保証)&lt;/h1&gt;
&lt;p&gt;Google Drive File Streamをインストールする前に以下の作業をする。(後でもDriveFSをコピーしてしまえば出来るが入れる前の方が安全)&lt;/p&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;大容量HDDがHドライブのとき，コマンドプロンプトで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;DFSCache&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でh:\DFSCacheを作成して，そこへのシンボリックリンクをGoogle Drive File Streamアプリが作成する筈フォルダ名で作成する。(usernameは自分のホームフォルダに置き換える)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mklink /d c:\Users\username\AppData\Local\Google\DriveFS h:\DFSCache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としてからGoogle Drive File Streamをインストールすると，h:\DFSCacheにもりもりファイルが溜まる。&lt;/p&gt;
&lt;h2&gt;Mac&lt;/h2&gt;
&lt;p&gt;/Users/username/Library/Application Support/Google/DriveFS にキャッシュが置かれるので，これを外付けドライブ等へのシンボリックリンクにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /Volumes/extdrive/DriveFS
sudo chown username:staff DriveFS
&lt;span class="nb"&gt;cd&lt;/span&gt; /Users/username/Library/Application&lt;span class="se"&gt;\ &lt;/span&gt;Support/Google
ln -s /Volumes/extdrive/DriveFS DriveFS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でextdrive上に逃がせる。&lt;/p&gt;</content><category term="GoogleDrive"></category></entry><entry><title>vcpkgのninja</title><link href="/2017/10/13/vcpkg-ninja/" rel="alternate"></link><published>2017-10-13T23:00:00+09:00</published><updated>2017-10-13T23:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-10-13:/2017/10/13/vcpkg-ninja/</id><summary type="html">&lt;p&gt;ninja in vcpkg&lt;/p&gt;</summary><content type="html">&lt;h1&gt;vcpkgでハマる&lt;/h1&gt;
&lt;h2&gt;追記&lt;/h2&gt;
&lt;p&gt;↓で色々頑張ったのだが結局のところ英語以外の環境はあちこちでトラブルが発生する。
諦めてVisual Studioの&lt;a href="https://www.microsoft.com/en-US/download/details.aspx?id=48157"&gt;英語言語パック&lt;/a&gt;をインストールしたら解決した。&lt;/p&gt;
&lt;h2&gt;旧記事&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;を試してみようと，とりあえずPower Shellで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
.\vcpkg install opencv:x64-windows
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやったらzlibのビルドで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BUILD_FAILED&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="n"&gt;portfiles&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;.\&lt;/span&gt;&lt;span class="n"&gt;vcpkg&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/Microsoft/vcpkg/iss&lt;/span&gt;&lt;span class="n"&gt;ues&lt;/span&gt; &lt;span class="n"&gt;including&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;
  &lt;span class="n"&gt;Vcpkg&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;e19c24d2911ff1ef648aeed0c596e3987eafebf&lt;/span&gt;

&lt;span class="n"&gt;Additionally&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attach&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;relevant&lt;/span&gt; &lt;span class="n"&gt;sections&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいなエラーでコケる。エラーログを見てみると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C:/local/vcpkg/downloads/cmake-3.9.3-win32-x86/bin/cmcldeps.exe&amp;quot; RC C:\local\vcpkg\buildtrees\zlib\src\zlib-1.2.11\win3
2\zlib1.rc &amp;quot;CMakeFiles\zlib.dir\win32\zlib1.res.d&amp;quot; CMakeFiles\zlib.dir\win32\zlib1.res &amp;quot;: CN[h t@C:  &amp;quot; &amp;quot;C:/Program Files
 (x86)/Microsoft Visual Studio 14.0/VC/bin/amd64_x86/cl.exe&amp;quot; C:\PROGRA~2\WI3CF2~1\8.1\bin\x64\rc.exe -DNO_FSEEKO -DZLIB_
DLL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -IC:\local\vcpkg\buildtrees\zlib\src\zlib-1.2.11 -IC:\local\v
cpkg\buildtrees\zlib\x86-windows-rel /DWIN32 /foCMakeFiles\zlib.dir\win32\zlib1.res C:\local\vcpkg\buildtrees\zlib\src\z
lib-1.2.11\win32\zlib1.rc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;途中変な文字化けをしているのでchcpでutf-8にしていないせいかと&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chcp 65001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とやってから実行してみたが何の変化も無し。
zlibのportsを見てみると，どうもninjaを使っているらしい。
そして&lt;a href="https://github.com/Microsoft/vcpkg/commit/67e876c76555c466e4faf49d6cd80a88b835f972#diff-1478a69d316b5c33129cf0ec2c174b7d"&gt;これ&lt;/a&gt;。
という訳でvcpkg/ports/zlib/portfile.cmakeの&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;PREFER&lt;/span&gt; &lt;span class="err"&gt;NINJA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;をコメントアウト。
ようやくビルドできた。&lt;/p&gt;</content><category term="VC"></category></entry><entry><title>Google Apps ScriptでDriveとGMail連携</title><link href="/2017/09/23/GAS/" rel="alternate"></link><published>2017-09-23T21:00:00+09:00</published><updated>2017-09-23T21:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-09-23:/2017/09/23/GAS/</id><summary type="html">&lt;p&gt;GoogleDrive and GMail&lt;/p&gt;</summary><content type="html">&lt;h1&gt;参加者が撮った写真を自動でWebアルバムみたいに表示したい&lt;/h1&gt;
&lt;p&gt;という要望があったので，この手の連携となれば&lt;a href="https://ifttt.com"&gt;IFTTT&lt;/a&gt;だろと調べてみたのだが，不特定多数からの受付が出来なさそうなので諦め。&lt;/p&gt;
&lt;p&gt;GMailだとusername@gmail.comなアドレスについて，username+tag@gmail.comでも受信できる技があるので，それをトリガにGoogle Photosに保存できるだろと少し調査。
取り敢えずGoogle Driveなら直ぐ出来そうなので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;特定のアドレスに送られたメールの添付ファイルをGoogle Driveのフォルダに自動で保存する(メールはゴミ箱へ)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;という処理に。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e-mail: username+tag@gmail.com&lt;/li&gt;
&lt;li&gt;Google Driveのフォルダ: Test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，ググって出てきたスクリプトだと&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getSubject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな処理だったので，ならToでもできるだろって事で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getSubject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username+tag@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としたら，Outlookが&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;to:&amp;lt;username+tag@gmail.com&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で送ってくるのでFalseになる。調べたら部分一致はindexOfでイケるらしいので下記で成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gmailFileUploader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GmailApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInboxThreads&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;　
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;　
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;isUnread&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;　
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getTo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username+tag@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;attachments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getAttachments&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;　
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;folders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFoldersByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;folders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
          &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;folders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;Threads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;moveToTrash&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//保存終了したらゴミ箱に移動&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Javascript"></category></entry><entry><title>macOSでOpenCL</title><link href="/2017/07/03/macOSOpenCL/" rel="alternate"></link><published>2017-07-03T22:00:00+09:00</published><updated>2017-07-03T22:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-07-03:/2017/07/03/macOSOpenCL/</id><summary type="html">&lt;p&gt;macOSでOpenCL&lt;/p&gt;</summary><content type="html">&lt;h1&gt;macOSでOpenCLを頑張ってみた&lt;/h1&gt;
&lt;p&gt;折角Radeonを搭載しているiMacもあるのでOpenCLでDeep Learningのframeworkが動かないかと弄ってみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/arrayfire/arrayfire"&gt;Arrayfire&lt;/a&gt;とか&lt;a href="https://github.com/BVLC/caffe/tree/opencl"&gt;CaffeのOpenCLブランチ&lt;/a&gt;とか&lt;a href="https://github.com/hughperkins/cltorch"&gt;cltorch&lt;/a&gt;とか&lt;a href="https://github.com/pyopencl/pyopencl"&gt;PyOpenCL&lt;/a&gt;とか色々と試してみて、ArrayfireやPyOpenCLは一応GPU使って動いてる感までは得られた。&lt;/p&gt;
&lt;p&gt;が、OpenCL自体が遅くCPUより処理が遅い。おまけにArrayfireは何かやらかすとmacOSごと調子悪くなる(要再起動)。つらい&lt;/p&gt;</content><category term="macOS"></category><category term="OpenCL"></category><category term="Torch"></category></entry><entry><title>macOSでTensorflow</title><link href="/2017/05/18/macOSTensorflow/" rel="alternate"></link><published>2017-05-18T08:00:00+09:00</published><updated>2017-05-18T08:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-05-18:/2017/05/18/macOSTensorflow/</id><summary type="html">&lt;p&gt;macOSでTensorflow&lt;/p&gt;</summary><content type="html">&lt;h1&gt;macOSでTensorflowを頑張ってみた&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.amedama.jp/entry/2017/03/08/223308"&gt;ここ&lt;/a&gt;の通りやってもCPUによってはまだ改善点があるようで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn&amp;#39;t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn&amp;#39;t compiled to use FMA instructions, but these are availab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とでる。bazelでビルドする時にAVX2とFMAも加えてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda create --name tf35 &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.5 scipy numpy jupyter ipython scikit-learn scikit-image matplotlib pandas h5py
$ activate tf35
$ brew install bazel swig
$ git clone https://github.com/tensorflow/tensorflow.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; tensorflow
$ git checkout v1.0.1
$ ./configure
$ bazel build -c opt --copt&lt;span class="o"&gt;=&lt;/span&gt;-mavx --copt&lt;span class="o"&gt;=&lt;/span&gt;-msse4.1 --copt&lt;span class="o"&gt;=&lt;/span&gt;-msse4.2 --copt&lt;span class="o"&gt;=&lt;/span&gt;-mavx2 --copt&lt;span class="o"&gt;=&lt;/span&gt;-mfma //tensorflow/tools/pip_package:build_pip_package
$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
$ pip uninstall tensorflow keras
$ pip install /tmp/tensorflow_pkg/tensorflow-1.0.1-cp35-cp35m-macosx_10_7_x86_64.whl
$ pip install keras
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -O https://raw.githubusercontent.com/fchollet/keras/master/examples/mnist_cnn.py
echo &amp;#39;K.clear_session()&amp;#39; &amp;gt;&amp;gt; mnist_cnn.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とした後に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python mnist_cnn.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でmnistが動く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Using TensorFlow backend.
x_train shape: (60000, 28, 28, 1)
60000 train samples
10000 test samples
Train on 60000 samples, validate on 10000 samples
Epoch 1/12
60000/60000 [==============================] - 100s - loss: 0.3406 - acc: 0.8961 - val_loss: 0.0818 - val_acc: 0.9734
Epoch 2/12
60000/60000 [==============================] - 96s - loss: 0.1207 - acc: 0.9643 - val_loss: 0.0533 - val_acc: 0.9822
Epoch 3/12
60000/60000 [==============================] - 95s - loss: 0.0891 - acc: 0.9743 - val_loss: 0.0461 - val_acc: 0.9852
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1epochあたり100s(Core i7のiMac)。Core i5のmac miniだと&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Epoch 10/12
60000/60000 [==============================] - 195s - loss: 0.0391 - acc: 0.9883 - val_loss: 0.0277 - val_acc: 0.9905
Epoch 11/12
60000/60000 [==============================] - 219s - loss: 0.0379 - acc: 0.9893 - val_loss: 0.0306 - val_acc: 0.9899
Epoch 12/12
60000/60000 [==============================] - 247s - loss: 0.0359 - acc: 0.9887 - val_loss: 0.0266 - val_acc: 0.9909
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにGeForce 970だと1 epochあたり9s。これだけ頑張っても10倍遅い。GeForce 1080だと1 epochあたり4s。つらい&lt;/p&gt;</content><category term="macOS"></category><category term="Tensorflow"></category></entry><entry><title>GNU nano</title><link href="/2017/04/01/nano/" rel="alternate"></link><published>2017-04-01T09:00:00+09:00</published><updated>2017-04-01T09:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-04-01:/2017/04/01/nano/</id><summary type="html">&lt;p&gt;GNU nano&lt;/p&gt;</summary><content type="html">&lt;h1&gt;GNU nano&lt;/h1&gt;
&lt;p&gt;自分では滅多に使わないが、とりあえずUnix系の環境を触らせるときにオススメのエディタ&lt;a href="https://github.com/eiichiromomma/CVMLAB/wiki/nano"&gt;GNU nanoの紹介記事&lt;/a&gt;を更新。&lt;/p&gt;
&lt;p&gt;.nanorcについては思い切り勘違いしてた。というか初期設定ファイルがソースパッケージにしか無いのは変だ。&lt;/p&gt;</content><category term="nano"></category></entry><entry><title>NA (Excel)</title><link href="/2017/03/31/excelna/" rel="alternate"></link><published>2017-03-31T23:00:00+09:00</published><updated>2017-03-31T23:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-03-31:/2017/03/31/excelna/</id><summary type="html">&lt;p&gt;Excel NA()&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Excelで欠損値のグラフ&lt;/h1&gt;
&lt;p&gt;Excelで欠損値のあるデータのグラフを描こうとすると線が切れる。
&lt;img alt="こんな感じ" src="/images/20170331-1.png"&gt;&lt;/p&gt;
&lt;p&gt;欠損値のところに=NA()を入れておくと補完してくれるらしい。
&lt;img alt="こんな感じ" src="/images/20170331-2.png"&gt;&lt;/p&gt;</content><category term="Excel"></category></entry><entry><title>VSCodeとClang</title><link href="/2017/03/05/vscode_clang/" rel="alternate"></link><published>2017-03-05T11:00:00+09:00</published><updated>2017-03-05T11:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-03-05:/2017/03/05/vscode_clang/</id><summary type="html">&lt;p&gt;setup VSCode and clang&lt;/p&gt;</summary><content type="html">&lt;h1&gt;VSCodeの補完&lt;/h1&gt;
&lt;p&gt;代表的な補完拡張の中にclangを使ったものがあるが、CMakeが&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_EXPORT_COMPILE_COMMANDS&lt;/span&gt; &lt;span class="s"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で吐いてくれるcompile_commands.jsonに対応していない。
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mitaki28.vscode-clang"&gt;C/C++ Clang Command Adapter&lt;/a&gt;ではsettings.jsonの"clang.cxxflags"にコンパイラへのオプションを一つずつ並べないと有効にならない。&lt;/p&gt;
&lt;p&gt;CMakeの出力はアホみたいにオプションが多くて流石に手入力はやりたくないので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat compile_commands.json &lt;span class="p"&gt;|&lt;/span&gt; gsed -e &lt;span class="s1"&gt;&amp;#39;s/ -/&amp;quot;,\n&amp;quot;-/g&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると良い感じに変換できる。-oから先は不要なのでそれまでをsetting.jsonに貼り付ければ良い。&lt;/p&gt;</content><category term="VSCode"></category><category term="C++"></category></entry><entry><title>YouCompleteMe</title><link href="/2017/03/05/youcompleteme/" rel="alternate"></link><published>2017-03-05T10:00:00+09:00</published><updated>2017-03-05T10:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-03-05:/2017/03/05/youcompleteme/</id><summary type="html">&lt;p&gt;setup YouCompleteMe&lt;/p&gt;</summary><content type="html">&lt;h1&gt;YouCompleteMe&lt;/h1&gt;
&lt;p&gt;C/C++の場合、clangを使ったVimの入力支援。他言語も色々ある。
NeoBundleで使おうとして色々なサイトを漁ったが結局ycmdとの連携がよくわからない。結論としてVundleを使う。
やり方は&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;元サイト&lt;/a&gt;に書かれている通りで、システムのclangとかは面倒になったので試していない。
ユーザごとにclangをビルドする羽目になるが確実に動く。&lt;/p&gt;</content><category term="Vim"></category><category term="C++"></category></entry><entry><title>Ubuntuでの日本語入力</title><link href="/2017/02/15/fcitx-skk/" rel="alternate"></link><published>2017-02-15T21:00:00+09:00</published><updated>2017-02-15T21:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-02-15:/2017/02/15/fcitx-skk/</id><summary type="html">&lt;p&gt;fcitx&amp;amp;skk&lt;/p&gt;</summary><content type="html">&lt;h1&gt;fcitx+skk&lt;/h1&gt;
&lt;p&gt;skkを愛用している訳だがUbuntuでfcitx+skkの環境だと謎のタイミングでskkのオンオフが切り変わる。&lt;/p&gt;
&lt;p&gt;設定をよくよく確認してみると「入力メソッド起動のその他のキー」なる項目があってデフォルトで左SHIFTが設定されていた。&lt;/p&gt;
&lt;p&gt;WindowsのCapsをIMEのオンオフに割り当ててるように(これも極めて迷惑だが)、確かに左SHIFTを押す度に切り替わる。&lt;/p&gt;
&lt;p&gt;という訳で「無効」にすると余計な動作が収まった。&lt;/p&gt;</content><category term="Ubuntu"></category></entry><entry><title>Pelicanセットアップ</title><link href="/2017/02/12/pelican_setup/" rel="alternate"></link><published>2017-02-12T12:00:00+09:00</published><updated>2017-02-12T12:00:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-02-12:/2017/02/12/pelican_setup/</id><summary type="html">&lt;p&gt;setup pelican&lt;/p&gt;</summary><content type="html">&lt;h1&gt;メモ用のブログ作成&lt;/h1&gt;
&lt;p&gt;Markdownで書き溜めて、後でgithubのwikiに上げようと思ったまま放置されてたネタ置き場の作成。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kazukousen.github.io/python-pelican-install.html"&gt;こっちの記事&lt;/a&gt;が元ネタだがgithub.ioのところで躓いてた。&lt;/p&gt;
&lt;p&gt;作業に関しては&lt;a href="http://blog.shigepon.info/blog/2016/03/31/migrate_octopress_github_page_to_pelican/#.WJ_ZLRKLRBw"&gt;こっち&lt;/a&gt;の方が簡潔。日付けの管理もこのサイト設定を使ってみた。&lt;/p&gt;
&lt;h2&gt;GitHub Pages作成&lt;/h2&gt;
&lt;p&gt;自分のアカウントでusername.github.ioのリポジトリを作成して、作業したい所にcloneしておく。以下cloneした中での作業&lt;/p&gt;
&lt;h2&gt;Pelicanの設定と更新作業&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でGithub Pagesを使う設定にしておく。あとはcontent内にmarkdown形式のファイルを置いてから&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で http://localhost:8000 から作業内容を確認できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Memo&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20170212&lt;/span&gt;&lt;span class="n"&gt;_post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;eiichiromomma&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;お試し&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;確認したら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でpushしてくれる。.gitignore云々を説明しているページもあるが、outputの中身だけpushされるので不要な気もする。&lt;/p&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;いちいちslugにタイムスタンプを埋め込むのも面倒なので、上のサイトの受け売りでディレクトリを掘るようにpelicanconf.pyを設定。ちなみにファイル名は無関係らしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#pelicanconf.py&lt;/span&gt;
&lt;span class="c1"&gt;#ファイル名からslugを取得&lt;/span&gt;
&lt;span class="n"&gt;FILENAME_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})-(?P&amp;lt;slug&amp;gt;.*)&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#得られたslugからhtml生成時のurlと保存先を指定&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;としておけば年月日でディレクトリを掘ってくれる。&lt;/p&gt;</content><category term="pelican"></category><category term="python"></category></entry><entry><title>Hello world</title><link href="/2017/02/12/20170212_post/" rel="alternate"></link><published>2017-02-12T11:45:00+09:00</published><updated>2017-02-12T11:45:00+09:00</updated><author><name>eiichiromomma</name></author><id>tag:None,2017-02-12:/2017/02/12/20170212_post/</id><summary type="html">&lt;p&gt;Hello world&lt;/p&gt;</summary><content type="html">&lt;h1&gt;お試し&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;pelican&lt;/li&gt;
&lt;li&gt;markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="pelican"></category><category term="python"></category></entry></feed>